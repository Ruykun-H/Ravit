Ravit Command Manual(한국어)

Ravit은 실행 파일과 동일한 디렉토리에 있는 list.rvt 파일을 통해 실행됩니다.
같은 이름의 파일이 없다면 실행할 수 없습니다.
	list.rvt 파일 내용은 "File Quantity :"로 시작해야 합니다.
	"File Quantity :" 후에는 읽을 파일의 갯수가 들어갑니다.
	다음 줄부터는 읽을 파일의 이름과 확장자가 들어갑니다.
	한 줄에 하나의 파일명이 들어갑니다.

Ravit에는 명령어, 포인터, 데이터 등을 저장하기 위한 몇 가지 공간이 존재합니다.
	헤더(Header)
		파일의 함수 번호, 파일의 크기에 관한 정보를 담고 있습니다.
		파일의 처음 부분에 존재합니다.
		파일의 크기는 인풋 박스와 커맨드 박스를 합한 크기를 말합니다.
	인풋 박스(Input Box)
		Task의 시작에, 입력값을 받으면 이 곳에서 포인터가 출발합니다.
		자연수를 넣을 경우
			커맨드 박스 위에 가로로 놓여있는 인풋 박스에서 n번째 칸에 'a'가 있다면 그 곳에서 아래 방향 포인터가 생성됩니다.
		0을 넣을 경우
			커맨드 박스 왼쪽에 세로로 놓여있는 인풋 박스에 'A'가 있다면 모든 'A'에서 오른쪽 방향 포인터가 생성됩니다.
	커맨드 박스(Command Box)
		명령어들이 커맨드 박스에 저장됩니다.
		커맨드 박스의 크기는 헤더의 크기 정보보다 가로 세로 모두 1씩 작습니다.
		호출된 함수는 커맨드 박스를 넘어간 곳의 값을 바꿀 수 없습니다.
	포인터 박스(Pointer Box)
		포인터들이 포인터 박스에 저장됩니다.
		모든 포인터는 방향을 가집니다. 다른 방향을 가진 포인터가 한 좌표에 동시에 존재할 수 있습니다.
		모든 포인터는 step의 시작에 자신이 움직이는 방향으로 1칸 이동합니다.
		포인터가 포인터 박스 밖으로 나갈 경우 제거됩니다.
	데이터 박스(Data Box)
		데이터들이 데이터 박스에 저장됩니다.
		중력이 적용될 경우 이 곳의 데이터들은 중력에 영향을 받습니다.
		데이터끼리는 서로를 통과할 수 없습니다.
		특정 데이터, 혹은 모든 데이터가 통과할 수 없는 데이터 박스 명령이 존재합니다.
	스택(Stack)
		커맨드 박스 아래에 존재합니다.
		크기는 커맨드 박스의 가로 크기와 같습니다.
Ravit 명령어
	동일 step 내에서 여러 명령이 호출될 경우, 낮은 단계의 명령이 우선적으로 실행됩니다.
	단계가 같다면, 위에 있는 명령이 우선적으로 실행됩니다.
	높이가 같다면, 왼쪽에 있는 명령이 우선적으로 실행됩니다.
	
	다른 방향의 두 포인터가 같은 좌표에서 만나도 명령은 한 번만 실행됩니다.
	데이터 박스 명령
		같은 좌표의 데이터 박스에 영향을 미치는 명령입니다.
		'd'를 제외하면 실행될 수 없는 명령입니다.
		'x'
			데이터 박스의 데이터가 통과할 수 없습니다.
		'd'
			데이터 박스의 데이터가 통과할 수 없습니다.
			2단계 명령으로 'd'가 실행된다면 데이터가 통과할 수 있는 '_'가 됩니다.
			'_'는 task의 끝에 'd'가 됩니다.
		'S'
			0 이상의 데이터만 통과할 수 있습니다.
		's'
			0 미만의 데이터만 통과할 수 있습니다.
		'Z'
			0 이외의 데이터만 통과할 수 있습니다.
		'z'
			0인 데이터만 통과할 수 있습니다.
	
	제 1단계 명령(step에서 가장 먼저 실행됩니다.)
		'f'
			해당 좌표의 데이터 박스에 데이터가 존재할 경우, 해당 데이터의 값과 일치하는 번호를 가진 함수가 있다면 호출합니다.
			호출된 함수는 호출된 좌표의 오른쪽 아래부터 커맨드 박스를 덮어씌웁니다.
	
	제 2단계 명령
		'X'
			포인터를 제거합니다.
		'D'
			해당 좌표의 데이터 박스에 데이터가 존재하지 않는다면 포인터를 제거합니다.
		'>, v, <, ^'
			해당 좌표의 포인터는 진행방향이 오른쪽, 아래쪽, 왼쪽, 위쪽이 됩니다.
		'V'
			해당 좌표의 포인터는 진행방향이 4방향 중 무작위로 정해집니다.
		'A, a, B, b'
			해당 좌표에 진행방향이 오른쪽, 아래쪽, 왼쪽, 위쪽인 포인터를 추가합니다.
		'd'
			해당 좌표의 커맨드 박스의 값이 '_'가 됩니다.
			'_'는 task의 끝에 'd'가 됩니다.
			'd'는 데이터가 통과할 수 없습니다.
		'0, 1, 2, 3, 4, 5, 6, 7, 8, 9'
			해당 좌표의 데이터 박스의 값이 해당 숫자가 됩니다.
		'E'
			스택에서 값 하나를 꺼냅니다.
			해당 좌표의 데이터 박스의 값이 해당 값이 됩니다.
			스택이 비어있다면 0이 됩니다.
		'e'
			해당 좌표의 데이터 박스의 값은 스택 가장 위의 값이 됩니다.
			스택이 비어있다면 0이 됩니다.
		'O'
			해당 좌표의 데이터 박스에 값이 있다면 제거합니다.
	
	제 3단계 명령
		제 3단계 명령은 중력 관련 명령입니다.
		다른 방향의 명령이 동일 step에서 실행될 경우 전부 무시합니다.
		다른 연산자를 가진 명령이 동일 step에서 실행될 경우 연산자를 가지지 않는 명령으로 대체됩니다.
		매뉴얼에서 3단계의 모든 명령은 오른쪽, 아래쪽, 왼쪽, 위쪽 순서로 기록되었습니다.
		'G, g, H, h'
			연산자를 가지지 않는 중력입니다. 데이터가 같은 지점을 향해 이동할 경우, 데이터가 연산되지 않고 쌓입니다.
		'I, i, J, j'
			+ 연산자를 가진 중력입니다.
		'K, k, L, l'
			- 연산자를 가진 중력입니다. 중력 방향에서 봤을 때 아래에 있는 데이터에서 나머지 데이터를 뺍니다.
		'M, m, N, n'
			* 연산자를 가진 중력입니다.
		'T, t, U, u'
			/ 연산자를 가진 중력입니다. 중력 방향에서 봤을 때 아래에 있는 데이터에서 나머지 데이터를 나눕니다.
		'W, w, Y, y'
			% 연산자를 가진 중력입니다.
			중력 방향에서 봤을 때 아래에 있는 데이터에서 바로 위 데이터를 나눠 나머지를 구하는 것을 반복합니다.
	
	제 4단계 명령
		제 4단계 명령은 데이터 박스의 데이터가 해당 명령과 같은 좌표에 있을 때 실행됩니다.
		'P'
			해당 좌표의 데이터 박스의 값을 제거하고, 그 값을 스택에 넣습니다.
		'p'
			해당 좌표의 데이터 박스의 값을 스택에 넣습니다.
			그 데이터는 다른 곳으로 이동하기 전까지 이 명령을 실행시키지 않습니다.
		'o'
			해당 좌표의 데이터 박스의 값을 제거합니다.
	
	제 5단계 명령
		'C'
			스택이 비워질 때까지 스택의 값을 꺼냅니다.
		'c'
			스택의 값 하나를 꺼냅니다.
		'Q'
			스택이 비워질 때까지 스택의 값을 꺼내 출력합니다.
		'q'
			스택의 값 하나를 꺼내 출력합니다.
		'R'
			스택이 비워질 때까지 스택의 값을 꺼내 ASCII 문자로 출력합니다.
		'r'
			스택의 값 하나를 꺼내 ASCII 문자로 출력합니다.
	
	제 5단계 명령이 끝난 후, 포인터 박스에 포인터가 남아있는지 확인합니다.
	포인터가 남아있을 경우, 처음으로 돌아가 다음 step을 진행합니다.
	포인터가 남아있지 않을 경우, 커맨드 박스에 아래에 해당하는 문자가 있을 경우 해당 내용을 실행합니다.
		'_'
			커맨드 박스의 해당 값을 'd'로 바꿉니다.
	위 내용을 실행 후, 다음 task로 넘어가 입력값을 받습니다.